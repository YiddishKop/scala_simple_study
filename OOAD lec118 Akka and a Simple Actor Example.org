# -*- org-export-babel-evaluate: nil -*-
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args:python :session AKKA and a simple Actor Example
#+PROPERTY: header-args:ipython :session AKKA and a simple Actor Example
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/yiddi/git_repos/YIDDI_org_export_theme/theme/org-nav-theme_cache.css" >
#+HTML_HEAD: <script src="https://hypothes.is/embed.js" async></script>
#+HTML_HEAD: <script type="application/json" class="js-hypothesis-config">
#+HTML_HEAD: <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: H:3 num:t ^:nil _:nil tags:not-in-toc
#+TITLE: AKKA and a simple Actor Example
#+AUTHOR: yiddishkop
#+EMAIL: [[mailto:yiddishkop@163.com][yiddi's email]]
#+TAGS: {PKGIMPT(i) DATAVIEW(v) DATAPREP(p) GRAPHBUILD(b) GRAPHCOMPT(c)} LINAGAPI(a) PROBAPI(b) MATHFORM(f) MLALGO(m)



* Defining an Actor class

Actors are implemented by extending the ~Actor~ base trait and implementing the
~receive~ method. The ~receive~ method should define a series of case statements
(which has the type ~PartialFunction[Any, Unit]~) that defines which messages
your Actor can handle, using standard Scala pattern matching, along with the
implementation of how the messages should be processed.


#+BEGIN_SRC scala
    class SimpleActor extends Actor{
      def receive ={
        case s:String => println("String: " + s)
        case i:Int => println("Number: " + i)
      }

      // foo CAN NOT be access by others
      def foo = println("Normal method")
    }
#+END_SRC

Please note that the Akka Actor ~receive~ message loop is exhaustive(极其详细的),
which is different compared to Erlang and the late Scala Actors. This means that
you need to provide a pattern match for ~all messages that it can accept~ and if
you want to be able to handle unknown messages then you need to have a default
case as in the example above. Otherwise an ~akka.actor.UnhandledMessage(message,
sender, recipient)~ will be published to the ~ActorSystem~’s ~EventStream~.

Note further that the return type of the behavior defined above is ~Unit~; if
the actor shall reply to the received message then this must be done explicitly
as explained below.

The result of the ~receive~ method is a partial function object, which is stored
within the actor as its “initial behavior”, see Become/Unbecomefor further
information on changing the behavior of an actor after its construction.

* Build a ~ActorSystem~
in order to use Akka we need to have our classes for actors, also we have to
build something called ~ActorSystem~

** what is ActorSystem?

 [[file:dropbox page/screenshot_2018-08-10_02-54-54.png]]

 An actor system is a hierarchical group of actors which share common
 configuration, e.g. dispatchers, deployments, remote capabilities and
 addresses. It is also the entry point for creating or looking up actors.

 Make a ~akka.actor.ActorSystem~ by call apply method on it, and give
 ~ActorSystem~ a name:

 #+BEGIN_SRC scala
     val system = ActorSystem("SimpleSystem")
 #+END_SRC


 The ~apply~ method of ~ActorSystem~ constructor has the following defition and
 the interpretation in offical website
 #+BEGIN_SRC scala
   def apply(name: String,
             config: Option[Config] = None,
             classLoader:Option[ClassLoader] = None,
             defaultExecutionContext:Option[ExecutionContext] = None
   ): ActorSystem
 #+END_SRC

 #+BEGIN_QUOTE
 Creates a new ActorSystem with the specified name, the specified ClassLoader if
 given, otherwise obtains the current ClassLoader by first inspecting the current
 threads' getContextClassLoader, then tries to walk the stack to find the callers
 class loader, then falls back to the ClassLoader associated with the ActorSystem
 class. If an ExecutionContext is given, it will be used as the default executor
 inside this ActorSystem. If no ExecutionContext is given, the system will
 fallback to the executor configured under
 "akka.actor.default-dispatcher.default-executor.fallback". The system will use
 the passed in config, or falls back to the default reference configuration using
 the ClassLoader.
 #+END_QUOTE

 ~ActorSystem~ has potentially multiple threads and it’s just sitting there
 waiting to receive messages.

** two methods to build an ~Actor~ obj

*** we CAN NOT build by ~new~
we now make an ~Actor~, note that we can not make it by ~new~

 +val actor = new SimpleActor+

 Exception in thread "main" akka.actor.ActorInitializationException: You cannot
 create an instance of [chap20multithreading.SimpleActorExample$SimpleActor]
 explicitly using the constructor (new).


*** method-1: create ~actor~ on ~ActorSystem~
   #+BEGIN_SRC scala
    val system = ActorSystem("SimpleSystem")
    val actor = system.actorOf(Props[SimpleActor], "SimpleActor")
   #+END_SRC

#+CAPTION: the whole process of building a Actor object
[[file:dropbox page/screenshot_2018-08-10_03-01-30.png]]


*** what is a ~Props~ ?
[[file:dropbox page/screenshot_2018-08-10_03-02-28.png]]

~Props~ is a configuration object using in creating an Actor; it is immutable,
so it is thread-safe and fully shareable.


#+BEGIN_SRC scala
    val props = Props.empty
    val props = Props[MyActor]
    val props = Props(classOf[MyActor], arg1, arg2)

    val otherProps = props.withDispatcher("dispatcher-id")
    val otherProps = props.withDeploy(<deployment info>)
#+END_SRC



*** TODO method-2: create ~actor~ inside of a ~context~ inside of ~system~

* How to send message to an Actor

~! reads 'bang'~

#+CAPTION: build an Actor and pass a message
[[file:dropbox page/screenshot_2018-08-10_03-03-29.png]]


#+BEGIN_SRC scala
    println("before message")
    actor ! "Hi there."
    println("after string")
    actor ! 42
    println("after Int")
    actor ! 'a'
    println("after char")
#+END_SRC


#+BEGIN_EXAMPLE
 before message
 after string
 after Int
 String: Hi there.
 after char
 Number: 42
 Chara
#+END_EXAMPLE

通过这段程序的打印序列，可以看出，actor 对 message 的处理也是 异步 的


* 代码
#+BEGIN_SRC scala
    import akka.actor.{Actor, ActorSystem, Props}

    object SimpleActorExample extends App{
      class SimpleActor extends Actor{
        def receive ={
          case s:String => println("String: " + s)
          case i:Int => println("Number: " + i)
          case c:Char => println("Char: " + c)
        }

        // foo CAN NOT be
        def foo = println("Normal method")
      }

      val system = ActorSystem("SimpleSystem")
      val actor = system.actorOf(Props[SimpleActor], "SimpleActor")

      println("before message")
      actor ! "Hi there."
      println("after string")
      actor ! 42
      println("after Int")
      actor ! 'a'
      println("after char")
    }
#+END_SRC
