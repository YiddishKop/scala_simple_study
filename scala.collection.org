1. collection.map(fn): map takes a function, and apply this function on each
   element of collection.

2. collection.flatMap(fn):
   flatMap 是如此的常用和优秀, 主要源于以下两个原因:

   1. ~flatMap(fn)~ 的本质就是先按照 fn 做 ~map~, 而后整体做 ~flatten~, 虽然是两
      次操作但 flatMap *遍历一次 collection* .

   2. ~flatMap(fn)~ 可以让 collection 中的每个元素产生 *{0, 1(same with normal
      map), n}* 个元素, 且由于 flatten 的原因, 结果不会出现 collection 嵌套的情
      况, 而 map 如果想实现 1 ot n 的效果就必须产生 collection 嵌套.

      ~Array(1,2,3).map(i => Array.fill(i)(0))~ 产生的是 Array(Array(0),
      Array(0,0), Array(0,0,0)), 一个嵌套数组.


   这里提供了一种 flatMap的常用技巧: 如何在只是用 flatMap 的情况下, 同时做到
   map(转换) 和 filter(过滤) 两种操作, 其要旨就在于利用 fn 把不合条件的 item 转
   换成空集合. 与空集合做 flatten 相当于什么都没做, 以此来模拟元素过滤.



   #+BEGIN_EXAMPLE
    //                                                                                    //
    //                                                                                    //
    // 这里产生 *两次* 数组遍历                                                           //
    //                                                                                    //
    // |----|                        |----|                     |----|                    //
    // |  1 |                        |  2 |                     |  2 |                    //
    // | -1 |    .map(_+1)           |  0 |  .filter(_>0)       |  0 |                    //
    // | -3 |  ------------------->  | -2 | ----------------->  |    |                    //
    // |  0 |                        |  1 |                     |  1 |                    //
    // |----|                        |----|                     |----|                    //
    //                                                                                    //
    // 这里仅仅产生 *一次* 数组遍历                                                            //
    // |----|                        |-------|                  |----|                    //
    // |  1 |                        |Seq( 2)|                  |  2 |                    //
    // | -1 |     .Map(fn)           |Seq( 0)|  .flatten        |  0 |                    //
    // | -3 |  ------------------->  |Seq(  )| ---------------> |    |                    //
    // |  0 |         |              |Seq( 0)|        |         |  1 |                    //
    // |----|         |              |-------|        |         |----|                    //
    //                |                               |                                   //
    //                |                               |                                   //
    //                +-------------------------------+                                   //
    //                         flatMap                                                    //
    //                                                                                    //
    // def fn(item:Int):Seq[Int] = if item > 0 Seq(item+1) else Seq.empty                 //
    ////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 10,344,12,'212142',1895,0,0,30,40,20                                                                                    //
    //                                                                                                                         //
    // ===> Array(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20) ===> Seq(TempData(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20)) //
    //                                                                                                                         //
    //                                                                                                                         //
    //  5,5,1,'212142',1896,0.07,.,-10,1,-21                                                                                   //
    //                                                                                                                         //
    // ===> Array(5, 5, 1, 212142, 1896, 0.07, ., -10, 1, -21) ===> Seq()                                                      //
    //                                         ^                                                                               //
    //                                         has a '.'                                                                       //
    // ..... just for illustation                                                                                              //
    //                                                                                                                         //
    // ===> Array(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20) ===> Seq(TempData(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20)) //
    // ===> Array(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20) ===> Seq(TempData(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20)) //
    // ===> Array(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20) ===> Seq(TempData(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20)) //
    // ===> Array(5, 5, 1, 212142, 1896, 0.07, ., -10, 1, -21) ===> Seq()                                                      //
    //                                         ^                                                                               //
    // ===> Array(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20) ===> Seq(TempData(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20)) //
    // ===> Array(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20) ===> Seq(TempData(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20)) //
    // ===> Array(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20) ===> Seq(TempData(10, 344, 12, 212142, 1895, 0, 0, 30, 40, 20)) //
    // ===> Array(5, 5, 1, 212142, 1896, 0.07, ., -10, 1, -21) ===> Seq()                                                      //
    //                                         ^                                                                               //
    // ===> Array(5, 5, 1, 212142, 1896, 0.07, ., -10, 1, -21) ===> Seq()                                                      //
    //                                         ^                                                                               //
    //                                                              ---------------------------------------------------------- //
    //                                                              flatten will get rid of the Seq()                          //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   #+END_EXAMPLE

2. collection.maxBy(fn): 以 fn 作为衡量标准, 从 collection 中挑出"最大"的 element.

   #+BEGIN_EXAMPLE
   |----|                      |----|
   |  1 |                      |  1 |
   | -9 |  maxBy(_*_)          | 81 |==> return this element
   |  2 | ============>        |  4 |
   |  0 |                      |  0 |
   | -3 |                      |  9 |
   |----|                      |----|

   #+END_EXAMPLE

3. collection.count(bool-fn): 统计符合布尔函数的 item from collection 有多少个.

4. collection.reduceLeft((A,B)=>A): 元素发射器, 一次一个的把 collection 中元素发
   射给B, 每次计算结果发给 A, 然后进行下一次计算.
